Веб-сайт -- фронт
Веб-приложение -- бек
Клиент-серверная архитектура -- это модель организации
Порой нагрузка на один сервер высока, потому используют два сервера, чтобы балансировщик между пользователем и сервером мог распределить нагрузку между двумя и более серверами.

Типы архитектуры
Монолитная
(user interface, buisiness logik, data access layer) => БД

Микросервисная
micriservice UI => microservice => БД

При чём UI один, а микросервисов может быть много.

AJAX -- технология на JS, которая позволяет пользователю обращаться к серверу без обновления страницы, то есть перекинуть помидоры в корзину и в корзине у тебя будет продукт.

Общение между frontend и backend происходит по протоколам HTTP или WebSocket
WebSocket - находится в постоянном соединении между сервером и клиентом, в то время, как HTTP разрывает связь после передачи данных
Если frontend поддерживает AJAX-технологию, он обращается к backend и получает оттуда только данные, которые изменились, а не всю страницу.
API -- это интерфейс, через который разные приложения могут связываться.
REST API -- это технология, которая позволяет получать данные по HTTP в формате JSON по конкретному URL и представлять данные на клиенсткой стороне.
200 -- запрос был отправлен коректно и сервер дал ответ
400 -- запрос некорректен, но ушёл.
405 -- использован неправильный метод при обращении к API
500 -- сервак ошибся

Горизонтальная композиция -- без фундамента нельзя сторить крышу



1 задача:

1. API ставить лайк
2. API снимать лайк
3. API (1) установить синий цвет
4. API проверяющий активность лайка.
5. API (4) от конкретного пользователя.
6. API выдающее количество лайков


2 задача:

1. API добавить товар в избранное.
2. API удалить товар из избранного.
3. API монитор цены на товар
4. API (3) в избранном.
5. API отправка сообщения.
6-9. API (5) + (1-4)


3 задача:

1-4. API подсчёта КБЖУ.
5-6. API добавления, API редактирования, API удаления записи о съеденных блюдах.
7. API съеденного за весь день.
8-11. статистика КБЖУ по дням.






















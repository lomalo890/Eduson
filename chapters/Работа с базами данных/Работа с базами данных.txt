В НБД данные хранятся не только в табличной форме, но и в любой другой:
1. Графовые
2. Колоночные
3. Дерево
и так далее...

Импользование, когда не чёткое структурирование данных главная цель, а гибкая, высокопроизводительная и масштабированная база данных.

Нормализация БД -- это метод проектирования БД, который позволяет привести базу данных к минимальной избыточности.

Первая нормальная форма: В ячейке должно быть одно значение. Не два (питон, скл), а только одно (питон)
Вторая нормальная форма: Без первого нет второго, она имеет ключ. Ключ может быть составным, то есть то есть совокупность ячеек одной строки может быть уникальной. Причём определённое значение в другой ячейке может от него зависить.
Треться нормальная форма: Без второго нет третьего. Должна отсутствовать транзитивная зависимость. То есть неключевые стобцы не должны зависить от других неключевх столбцов.

Если у человека много карт, то он может объединить карты одним номером. Это называется мастеркард

Как создать базу данных?
create database namebd;
create user username with password 'qwerty555';
grant all database namebd to username;

С СУБД (MySQL и так далее) идут сторонние программы для работы с запроссами.

Лучше устанавливать DBeaver, ибо он работает с многими СУБД.

Что нужно для подключаения?
хост
порт
пользователь
пароль
данные для подключения по SSH

Вместе с установкой СУБД устанавливается и консль этого СУБД.
Найди как-то.
В нашем случае это будет PostgerSQL
\l -- для отображения всех БД
\c namebd -- подключится и работать с базой namebd
\dt --посмотреть все таблицы БД
psql -Upostgres -- подключится через консоль на винде
sudo -i -u postgres и psql -- on linux

Ссылка с командами: https://www.geeksforgeeks.org/postgresql-psql-commands/
Пример простой базы данных: https://docs.yugabyte.com/preview/sample-data/northwind/

git branch --delete name_branch -- удалить ветку на удалённом репозитории
Но нужно ещё удалить ветку локально -- git branch --delete name_branch












Как подключится к БД на Python?

import psycopg2

HOST = host
DATABASE - database
USER = user
PASSWORD = password

connection = psycopg2.connect(
    host...(смотреть константы)
)

cursor = connection.cursor()
cursor.execute(query)
connection.close()









select pg_typeof(1) --> integer
select pg_typeof(1::smallimt) --> smallint
select 1.56543143::numeric(5, 3) --> пять цифр, после точки три. 1.565
select 1.56543143::real --> 1.565431 до 6 цифр после запятой, а double presision до 15

Удалить таблицу
drop table if exists table_name;

create table chars (
    a char(5) -- length 5
    b varchar(5) -- length 5 is not space
);

boll в SQL  не integer, но можно преобразовать
select(1 = 1) = bool(1)

select hg_typeof('2019-12-21') --> not his understant
select hg_typeof('2019-12-21'::date) --> date
select '2019-12-21'::timestampt --> '2019-12-21 00:00:00'
select '2019-12-21'::date + interval '1 month 3 days' --> '2020-01-24'





    Для создания суперпользователя: CREATE USER name WITH PASSWORD 'pass' SUPERUSER. 2
    Для создания обычного пользователя: CREATE USER name WITH PASSWORD 'pass'. 2
    Для создания пользователя с дополнительными параметрами (например, лимит на число одновременных подключений к БД): CREATE USER name WITH PASSWORD 'pass' CONNECTION LIMIT 5. 2














Запросы

select name, price * count from product p -- вывести циену остатка товара по каждй позиции.
select name, (price * count) as cost from product p -- название столбца cost

select price as p from goods where p > 20 and p < 40
то же, что и
select price as p from goods where p between 20 and 30 только они включены

ОПератон and мы можем писать хоть сколько.

select * from people where region is not null
select * from people where age in (11, 22, 33) -- если возраст равен каким-то из этих

select * from people where id_command in (select id from commands where salary > 1000000) -- вывести всех людей, которые состоят в команде с зарплатой в сумме больше миллиона
select distinct работает и с составными уникальными значениями, которые в совокупности своей представляют это уникальное значение.

Ещё сложней

select * from product p where exist (select 1 from order where product_id=p.product_id and cost>50) -- вывести все продукты, на которые был заказ больше 50 рублей
select * from people order by age desc -- отсортировать всех людей в порятке убывания, если поставить desc








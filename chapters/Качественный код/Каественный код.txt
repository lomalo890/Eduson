pycodestyle для выявления, но не исправления ошибок.
black для исправления файла по пип8
Кроме black можно использовать autopep8 --in-place --aggressive main.py

poetry new chapters/'Качественный код'/poetry создаст структуру проекта
poetry shell создаст виртуальное окружение в своей папке
poetry add rich устанавливает пакет Rich это Python библиотека, позволяющая отображать красивый текст и форматировать терминал
Чтобы вывести файл нужно cat <file>
poetry build собирает наш проект 
poetry publish <name_pack>


Тестирование

Code Review --проверяет, что конкретный участок кода выполняет заданные функции
Unit-тестирование проверяет работу только функций и методов в коде
Интеграционное тестирование проверяет, что блоки кода связанны между собой и работают без ошибок
UI-тестирование проверяет качество визуалаи функционала программы
Нагрузочное тестирование проверяет работоспособность системы с разным количеством пользователей 
Ручное тестирование проверяет выполнение программы в непредвиденных ситуациях и моделях
Пользовательское тестирование позволяет получить обратную связь от целевой аудитории
Chaos тестирование изучает поведение системы при нарушении инфраструктуры

Как проверить безопасность кода?

Code Review проверяет код на использование безопасных данных
Статистический анализ проверяет код на наличие общепринятых уязвимостей
Penetration testing ПОМОГАЕТ НАЙТИ СЛАБЫЕ МЕСТА В ЗАЩИТЕ КОДА

Как проверить организованность кода?

Стстический анализ проверяет соответствие программы практикам чистого кода
Автоматический рефакторинг выявляет частные ошибки и экономит время
ручной рефакторинг кастомизирует код под запрос конкретного рпоекта
Code Review помогает взглянуть на проекты со стороны других разработчиков

Есть плагин автоматического рефакторинга pylint, который выяляет ошибки как синтаксического характера, так и фрагменты кода, способных привести программу к ошибке
Индекс С - ошибки синтаксического характера
Индекс Е - фрагменты кода, способных привести программу к ошибке
Индекс R - рефакторинг
Индекс W - возможно лишнее

Тоже самое с flake8, только индексы другие
Индекс Е - Индекс Е в pylint
Индекс F - Индекс W в pylint






Структура проекта

Должен быть файл документации README.md, в котором написано:
1. Описание проекта (что он делает?)
2. Как установить проект?
3. Как настроить проект?
4. Как сообщить об ошибках?
5. как стать со-автором проекта?
6. Как оставить предложения о новом функционале?

Ещё лицензия LICENCE о правах пользователя и остальных лиц
requirements.txt отражает какие внешние модули использованы
setup.py с информацией о том, что Маше можно продавать мою библиотеку, то есть дистрибуция
директория docs - вся документация, описывающая ваш код
tests - там функциональные и интеграционные тесты

Что? не испортируется rich? Так он у тебя не установлен pip-ом, сраный ты мудила!
pip install rich

Но и тут не всё: при импорте простого рича, будет дотуп не ко всем функциям, а надо определённые. Что мы делаем?

from rich import pretty, print as pnt # лучше дать псевдоним. Функция принт же в системнике

def print_value(value):
    pretty.install()
    print(value)

Вуаля! Теперь вывод в консоль не тупо белого цвета.






загрузка внешних модулей

Нахождение, компиляция, использование

Места для поиска модуля: 

домшняя директория (кроме системных пакетов, которые интерпритатор итак знает);
директории, которые указаны в переменной PYTHONPATH
директории стандартной библиотеки
Не нашёл ещё? Смотри файлы с расширением .pth
Не нашёл и там? Ну тогда иди по пути <path_to_python>/lib/site-packages

from .output import function1, function2 -- ищи модуль в том же пакете
from ..output import function1, function2 -- ищи модуль в директории выше нашего
from ...output import function1, function2 -- и так далее

ВАЖНО!!!! Если делаешь пакет с модулями, то сделай там __init__.py. Это первый  файл, который вызовется во время компиляции. Мы можем там добавить констаноты, для того, чтобы потом их использовать в импортируемых модулях










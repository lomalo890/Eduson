Централизованная СКВ хороша тем, что гигантский 500 ГБтовый проект не надо хранить на компьюторе и можено его не выкладывать в интернет, но требует соединения с сервером и, если сервер сломается, приложение уничтожится. В то же время распределённые СКВ более отказоустойчивые и позволяют сохранять определённые куски кода из кодовой базы на свой ПК. Гит является распределённой СКВ. Гит создал Линус Торвальдс. Гит сделан для разаботки линукса.

Коммит -- набор зафиксированных изменениц в файлах.

3 состояния файла:

1. Рабочая копия: изменён -- вы внесли изменения, но не индексировали их.
2. Область индексирования: индексирование -- вы изменили и индексировали файл, но не зафиксировали его.
3. Каталог гит: зафиксирован -- вы изменили, индексировали и зафиксировали файл (закоммитили)

git add <file> / git add . (точка значит, добавить всё, что изменено)- индексировать файл
git status - проверить коммит на то, какие там файлы
git commit -m `commit message` - заккомитить изменение
git push - отправить коммит в удалённый репозиторий.
git pull - получить версию из удалённого репозитория
*.txt - все файлы с этим расширением
!text.txt - но не этот
build/ - все файлы и папки этого католога
doc/*.txt - все текстовые файлы этого католога
doc/**/*.txt - все текстовые файлы этого католога и текстовые файлы вложенных папок
git branch <name> - создать ветку
git checkout <name> - перейти на созданную ветку
git checkout -b <name> - создать ветку и сразу переключиться на неё (флаг -b)
git merge - слить ветку с предыдущей. То есть:
    git checkout -b develop (создаём и переходим в неё)
    git checkout -b feature (создаём от ветки девелоп и переходим в неё)
    git merge (окончили работу с фичур и сливаем с веткой девелоп)

Удалить ветку git push origin --delete имя ветки

Удалить коммит
1. Получаем хэш-код коммита, к которому хотим вернуться.
2. Заходим в папку репозитория и пишем в консоль:

    $ git reset --hard a3775a5485af0af20375cedf46112db5f813322a 
    $ git push --force
